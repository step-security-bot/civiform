#! /usr/bin/env python3

# DOC: Run a batch of browser tests in CI mode. Takes one argument, the
# DOC: 1-indexed batch number.

import glob
import subprocess
import sys

BATCH_COUNT = 10


def handle_bad_input(batch_num_input):
    print(f"Invalid batch number: {batch_num_input}", file=sys.stderr)
    exit(1)


# Gets the batch number from the command line arguments. The batch number is *one-indexed*.
def get_batch_number():
    if len(sys.argv) < 2:
        handle_bad_input("none")
    try:
        batch_number = int(sys.argv[1])
    except ValueError:
        handle_bad_input(sys.argv[1])
    if batch_number < 1 or batch_number > BATCH_COUNT:
        handle_bad_input(batch_number)
    return batch_number


# Gets a list of all the test files in the browser-test directory.
def get_all_test_files():
    test_files = glob.glob('browser-test/src/*.test.ts')
    test_files = [file.replace("browser-test/", "") for file in test_files]
    test_files.sort()
    return test_files


# Returns a subset of the test files, based on the batch number. This ensures we
# are evenly distributing the test across all available GitHub Actions runners.
def get_batch():
    all_test_files = get_all_test_files()
    batch_files = []
    for i in range(0, len(all_test_files)):
        if i % BATCH_COUNT == get_batch_number() - 1:
            batch_files.append(all_test_files[i])
    return batch_files


# Prints a preview of the tests to be run.
print(
    f"Batch {get_batch_number()} will run the following from {len(get_all_test_files())} total tests:"
)
for test_file in get_batch():
    print(f"   {test_file}")

if not get_batch():
    # get_batch() should never return an empty list.
    # Exit with an error code now if that happens, cancelling the GitHub Action.
    print("ERROR: No tests assigned to this batch.")
    exit(1)

shell_command = ["./bin/run-browser-tests-ci"] + get_batch()
subprocess.run(shell_command, check=True)
